pipeline {
  agent any

  parameters {
    string(name: 'vpc_name', description: 'VPC Name (e.g. weather-app)')
    string(name: 'env', description: 'Environment Name (e.g. dev, prod, stage, qa)')
  }

  environment {
    BASE_DIR = 'environments'
  }

  stages {
    stage('Prepare Environment Folder') {
      steps {
        script {
          def targetDir = "${BASE_DIR}/${params.env}"
          sh """
            echo "📁 Creating environment directory if not exists..."
            mkdir -p ${targetDir}
            
            echo "📄 Copying terraform.tfvars.template if missing..."
            if [ ! -f ${targetDir}/terraform.tfvars.template ]; then
              cp ${BASE_DIR}/dev/terraform.tfvars.template ${targetDir}/
            fi
          """
        }
      }
    }

    stage('Generate Terraform Plan') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          script {
            def tfDir = "${BASE_DIR}/${params.env}"
            dir(tfDir) {
              sh """
                set -e
                echo "📄 Preparing terraform.tfvars from template..."
                sed -e "s|\\\${vpc_name}|${params.vpc_name}|g" \\
                    -e "s|\\\${env}|${params.env}|g" terraform.tfvars.template > terraform.tfvars

                echo "📦 Running terraform init..."
                terraform init -input=false

                echo "🧠 Creating terraform plan..."
                terraform plan -input=false -var-file=terraform.tfvars -out=tfplan.out
              """
              archiveArtifacts artifacts: 'tfplan.out,terraform.tfvars', fingerprint: true
            }
          }
        }
      }
    }

    stage('Create PR (Optional)') {
      when {
        expression { return params.env != "" && params.vpc_name != "" }
      }
      steps {
        echo "📌 This step should be integrated with GitHub CLI or API to create a PR."
        echo "📝 PR should include terraform.tfvars and tfplan.out, or their summary."
        // You can automate PR creation with GitHub CLI if required.
      }
    }
  }
}
