pipeline {
  agent any

  parameters {
    string(name: 'vpc_name', description: 'VPC Name')
    string(name: 'env', description: 'Environment (dev, prod, stage, qa)')
  }

  environment {
    BASE_DIR = 'environments'
  }

  stages {
    stage('Prepare Terraform files and plan') {
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding',
           credentialsId: 'aws-credentials',
           accessKeyVariable: 'AWS_ACCESS_KEY_ID',
           secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
          string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')
        ]) {
          script {
            def branchName = "plan-${params.env}-${env.BUILD_NUMBER}"
            def tfDir = "${BASE_DIR}/${params.env}"

            // Checkout main branch to create new branch from
            checkout scm: [
              $class: 'GitSCM',
              branches: [[name: 'main']],
              userRemoteConfigs: [[
                url: 'https://github.com/shubham-thaware/terraform-module.git',
                credentialsId: 'github'
              ]]
            ]

            sh """
              set -e

              # Create environment directory if not exists
              mkdir -p ${tfDir}

              # Check if template file exists; if not, create a default one
              if [ ! -f terraform.tfvars.template ]; then
                echo "‚ö†Ô∏è terraform.tfvars.template not found, creating default template..."
                cat <<EOF > terraform.tfvars.template
vpc_name = "\\${vpc_name}"
env      = "\\${env}"
EOF
              fi

              # Render terraform.tfvars from template
              sed -e "s|\\\\${vpc_name}|${params.vpc_name}|g" \
                  -e "s|\\\\${env}|${params.env}|g" terraform.tfvars.template > ${tfDir}/terraform.tfvars

              cd ${tfDir}

              echo "üß™ Running terraform init..."
              terraform init -input=false

              echo "üß† Generating terraform plan..."
              terraform plan -input=false -var-file=terraform.tfvars -out=tfplan.out

              cd ../../

              # Git config for this repo
              git config user.name "jenkins-bot"
              git config user.email "jenkins@example.com"

              # Create new branch
              git checkout -b ${branchName}

              # Add files to git
              git add ${tfDir}/terraform.tfvars ${tfDir}/tfplan.out

              # Commit
              git commit -m "Terraform plan for ${params.env} - build ${env.BUILD_NUMBER}"

              # Push branch
              git push origin ${branchName}

              # Create PR using GitHub CLI
              gh auth login --with-token <<< "${GITHUB_TOKEN}"

              gh pr create --title "Terraform plan for ${params.env} - build ${env.BUILD_NUMBER}" \
                --body "This PR contains Terraform plan files for environment ${params.env} created by Jenkins build ${env.BUILD_NUMBER}." \
                --base main --head ${branchName} --repo your-org/your-repo
            """
          }
        }
      }
    }
  }
}
