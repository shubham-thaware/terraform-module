pipeline {
  agent any

  parameters {
    string(name: 'vpc_name', description: 'VPC Name')
    string(name: 'env', description: 'Environment (dev, prod, stage, qa)')
  }

  environment {
    BASE_DIR = 'environments'
  }

  stages {
    stage('Prepare Terraform files and plan') {
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding',
           credentialsId: 'aws-credentials',
           accessKeyVariable: 'AWS_ACCESS_KEY_ID',
           secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
          string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')
        ]) {
          script {
            def tfEnv = params.env
            def tfVpcName = params.vpc_name
            def branchName = "plan-${tfEnv}-${env.BUILD_NUMBER}"
            def tfDir = "${BASE_DIR}/${tfEnv}"

            checkout scm: [
              $class: 'GitSCM',
              branches: [[name: 'main']],
              userRemoteConfigs: [[
                url: 'https://github.com/shubham-thaware/terraform-module.git',
                credentialsId: 'github'
              ]]
            ]

            sh """
              set -e
              echo "üìÅ Preparing Terraform directory..."
              mkdir -p ${tfDir}

              if [ ! -f terraform.tfvars.template ]; then
                echo "‚ö†Ô∏è terraform.tfvars.template not found, creating default..."
                cat <<EOF > terraform.tfvars.template
vpc_name = "__VPC_NAME__"
env      = "__ENV__"
EOF
              fi

              echo "üìù Generating terraform.tfvars from template..."
              sed 's|__VPC_NAME__|${tfVpcName}|g; s|__ENV__|${tfEnv}|g' terraform.tfvars.template > ${tfDir}/terraform.tfvars

              cd ${tfDir}

              echo "üß™ Running terraform init..."
              terraform init -input=false

              echo "üß† Running terraform plan..."
              terraform plan -input=false -var-file=terraform.tfvars -out=tfplan.out

              cd ../../

              echo "üì¶ Committing tfplan and tfvars..."
              git config user.name "jenkins-bot"
              git config user.email "jenkins@example.com"
              git checkout -b ${branchName}
              git add "${tfDir}/terraform.tfvars" "${tfDir}/tfplan.out"
              git commit -m "Terraform plan for ${tfEnv} - build ${BUILD_NUMBER}"
              git push origin ${branchName}

              echo "üöÄ Creating pull request..."
              export GITHUB_TOKEN=${GITHUB_TOKEN}
              gh pr create --title "Terraform plan for ${tfEnv} - build ${BUILD_NUMBER}" \\
                --body "This PR contains Terraform plan files for environment ${tfEnv} created by Jenkins build ${BUILD_NUMBER}." \\
                --base main --head ${branchName} shubham-thaware/terraform-module
            """
          }
        }
      }
    }
  }
}
