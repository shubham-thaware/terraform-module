pipeline {
    agent any

    parameters {
        string(name: 'vpc_name', defaultValue: 'my-vpc', description: 'VPC Name')
        string(name: 'cidr_block', defaultValue: '10.0.0.0/16', description: 'CIDR Block')
        string(name: 'environment', defaultValue: 'dev', description: 'Environment')
    }

    environment {
        REPO_URL = 'https://github.com/shubham-thaware/terraform-module.git'
        BRANCH_NAME = "feature/vpc-${params.vpc_name}-${BUILD_NUMBER ?: '001'}"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'github', url: "${REPO_URL}"
            }
        }

        stage('Create Branch & Write tfvars') {
            steps {
                sh '''#!/bin/bash
                git checkout -b "${BRANCH_NAME}"

                mkdir -p environments/"${environment}"

                cat > environments/${environment}/terraform.auto.tfvars <<EOF
vpc_name   = "${vpc_name}"
cidr_block = "${cidr_block}"
env        = "${environment}"
EOF
                '''
            }
        }

        stage('Terraform Init & Plan') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    dir("environments/${params.environment}") {
                        sh '''#!/bin/bash
                        terraform init
                        terraform plan -var-file=terraform.auto.tfvars -out=tfplan.out
                        terraform show -no-color tfplan.out > tfplan.txt
                        '''
                    }
                }
            }
        }

        stage('Commit & Push Branch') {
            steps {
                sh '''#!/bin/bash
                git config user.name "Jenkins"
                git config user.email "jenkins@testdomain.com"
                git add .
                git commit -m "Add VPC ${vpc_name}"
                git push origin "${BRANCH_NAME}"
                '''
            }
        }

        stage('Create PR on GitHub') {
            steps {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    sh '''#!/bin/bash
                    PR_BODY=$(base64 environments/${environment}/tfplan.txt | tr -d '\\n')

                    cat > pr-body.json <<EOF
{
  "title": "Add VPC ${vpc_name}",
  "body": "Terraform Plan Output (base64):\\n${PR_BODY}",
  "head": "${BRANCH_NAME}",
  "base": "main"
}
EOF

                    curl -X POST -H "Authorization: token $GITHUB_TOKEN" \\
                         -H "Accept: application/vnd.github.v3+json" \\
                         https://api.github.com/repos/shubham-thaware/terraform-module/pulls \\
                         -d @pr-body.json
                    '''
                }
            }
        }
    }
}
