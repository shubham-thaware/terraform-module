pipeline {
  agent any

  parameters {
    string(name: 'ENVIRONMENT', defaultValue: 'stage', description: 'Environment to deploy (dev, qa, stage, prod)')
    string(name: 'VPC_NAME', defaultValue: 'app', description: 'VPC Name')
  }

  environment {
    AWS_ACCESS_KEY_ID     = credentials('aws-credentials') // Updated credential ID
    AWS_SECRET_ACCESS_KEY = credentials('aws-credentials')
    GITHUB_TOKEN          = credentials('github')
    REPO_URL              = 'https://github.com/shubham-thaware/terraform-module.git'
    GH_TOKEN              = credentials('github') // For GitHub CLI auth
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Prepare Terraform files and plan') {
      steps {
        script {
          def envDir = "environments/${params.ENVIRONMENT}"
          def tfvarsFile = "${envDir}/terraform.tfvars"
          def tfplan = "tfplan-${params.ENVIRONMENT}.out"
          def planBranch = "plan-${params.ENVIRONMENT}-${BUILD_NUMBER}"

          sh """
            echo 📁 Creating directory: ${envDir}
            mkdir -p ${envDir}
          """

          sh """
            echo 📝 Generating terraform.tfvars from template...
            sed 's|__VPC_NAME__|${params.VPC_NAME}|g; s|__ENV__|${params.ENVIRONMENT}|g' terraform.tfvars.template > ${tfvarsFile}
          """

          // Copy Terraform configuration files
          sh "cp -r terraform/* ${envDir}/"

          dir(envDir) {
            sh '''
              echo 🧪 Running terraform init...
              terraform init -input=false

              echo 🧠 Running terraform plan...
              terraform plan -input=false -var-file=terraform.tfvars -out=tfplan.out

              echo 📄 Converting plan to JSON...
              terraform show -json tfplan.out > tfplan.json
            '''
          }

          // Create new branch, commit tfplan.json and push
          sh """
            echo 🔧 Setting up Git
            git config --global user.email "jenkins@ci"
            git config --global user.name "jenkins"

            git checkout -b ${planBranch}
            git add ${envDir}/tfplan.json
            git commit -m "Terraform plan for ${params.ENVIRONMENT} [CI Build #${BUILD_NUMBER}]"
            git push ${REPO_URL} HEAD:${planBranch}
          """

          // Create Pull Request using GitHub CLI
          sh """
            echo 🚀 Creating Pull Request on GitHub...
            echo "$GITHUB_TOKEN" | gh auth login --with-token
            gh pr create --title "Terraform Plan for ${params.ENVIRONMENT} [CI Build #${BUILD_NUMBER}]" --body "Auto-generated Terraform plan for review." --base main --head ${planBranch}
          """
        }
      }
    }
  }
}
