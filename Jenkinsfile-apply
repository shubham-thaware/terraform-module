pipeline {
  agent any

  parameters {
    string(name: 'env', description: 'Environment name (dev, prod, stage, qa, etc)')
    string(name: 'vpc_name', description: 'VPC Name (e.g. weather-app)')
  }

  environment {
    BASE_DIR = 'environments'
  }

  stages {
    stage('Checkout main branch') {
      steps {
        checkout scm: [
          $class: 'GitSCM',
          branches: [[name: 'main']],
          userRemoteConfigs: [[
            url: 'git@github.com:your-org/your-repo.git', // update repo URL
            credentialsId: 'github-ssh-credentials'       // your GitHub SSH or HTTPS credentials id
          ]]
        ]
      }
    }

    stage('Terraform Apply') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          script {
            def tfDir = "${BASE_DIR}/${params.env}"
            dir(tfDir) {
              sh '''
                set -e
                echo "‚úÖ Applying terraform plan for environment: '${params.env}', VPC: '${params.vpc_name}'"

                # Validate if plan file exists
                if [ ! -f tfplan.out ]; then
                  echo "‚ùå ERROR: Terraform plan file (tfplan.out) not found in ${tfDir}"
                  exit 1
                fi

                echo "üì¶ Running terraform init..."
                terraform init -input=false

                echo "üöÄ Applying terraform plan..."
                terraform apply -input=false -auto-approve tfplan.out

                echo "‚úÖ Terraform apply completed."
              '''
            }
          }
        }
      }
    }
  }
}
