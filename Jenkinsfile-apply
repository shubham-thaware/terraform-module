pipeline {
  agent any

  parameters {
    string(name: 'vpc_name', description: 'VPC Name')
    string(name: 'env', description: 'Environment Name')
  }

  environment {
    TF_DIR = 'environments/dev'
  }

  stages {
    stage('Terraform Init & Apply') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials', // 🔐 Update with your actual AWS credentials ID
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          dir("${env.TF_DIR}") {
            sh '''
              set -e  # ⛔ Exit immediately if any command fails

              echo "📄 Preparing terraform.tfvars from template..."

              # ✅ Replace template variables with parameter values
              sed -e "s|\\\${vpc_name}|${vpc_name}|g" \
                  -e "s|\\\${env}|${env}|g" terraform.tfvars.template > terraform.tfvars

              echo "🧪 Checking Terraform version..."
              terraform -version

              echo "📦 Running terraform init..."
              terraform init -input=false

              echo "🧠 Generating terraform plan..."
              terraform plan -input=false -var-file=terraform.tfvars -out=tfplan.out

              echo "🚀 Applying terraform plan..."
              terraform apply -input=false -auto-approve tfplan.out

              echo "✅ Terraform apply completed."
            '''
          }
        }
      }
    }
  }
}
